import { Injectable, isDevMode } from '@angular/core';
import { HttpManagerService, Result } from '../http-manager/http-manager.service';

@Injectable({
  providedIn: 'root'
})
export class ObstService {

  vertices_obst_lit = [
    0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.5, 0.0, // bottom
    0.0, 0.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, // top
    0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.5, // left
    0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, 0.5, // right
    0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, // back
    0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.0, // front
  ];

  normals_obst_lit = [
    0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, // bottom
    0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, // top
    -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, // left
    1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, // right
    0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, // back
    0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0  // front
  ];

  //if (this.ext_32bit == null) {
  //	var colors_obst_lit = [
  //		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  //		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //		1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0,
  //		1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1,
  //		1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
  //		0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0
  //	];
  //}
  //else {
  colors_obst_lit = [
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0,
    1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1,
    0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0
  ];
  //}

  indices_obst_lit = [
    0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7,
    8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15,
    16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23
  ];

  // geometry
  vertices_geom_lit = [
    0.0, 0.6, 0.0, 0.5, 0.6, 0.0, 0.5, 1.0, 0.0, 0.0, 1.0, 0.0, // bottom
    0.0, 0.6, 0.5, 0.5, 0.6, 0.5, 0.5, 1.0, 0.5, 0.0, 1.0, 0.5, // top
    0.0, 0.6, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.0, 0.6, 0.5, // left
    0.5, 0.6, 0.0, 0.5, 1.0, 0.0, 0.5, 1.0, 0.5, 0.5, 0.6, 0.5, // right
    0.0, 0.6, 0.0, 0.0, 0.6, 0.5, 0.5, 0.6, 0.5, 0.5, 0.6, 0.0, // back
    0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 1.0, 0.5, 0.5, 1.0, 0.0, // front
  ];

  normals_geom_lit = [
    0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, // bottom
    0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, // top
    -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, // left
    1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, // right
    0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, // back
    0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0  // front
  ];

  // if (this.ext_32bit == null) {
  //   colors_geom_lit = [
  //     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0,
  //     1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1,
  //     1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
  //     0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0
  //   ];
  // }
  // else {
  colors_geom_lit = [
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0,
    1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1,
    0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
    0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0
  ];

  indices_geom_lit = [
    0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7,
    8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15,
    16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23
  ];

  // define file frame number and sizes

  // slice node file triangles

  vertices_slice_node = [
    0.5, 0.5, 0.5, 1.0, 0.5, 0.5, 1.0, 1.0, 0.5, 0.5, 1.0, 0.5,
    0.5, 0.5, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0,
    0.5, 0.5, 0.5, 0.5, 1.0, 0.5, 0.5, 1.0, 1.0, 0.5, 0.5, 1.0,
    1.0, 0.5, 0.5, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0,
    0.5, 0.5, 0.5, 0.5, 0.5, 1.0, 1.0, 0.5, 1.0, 1.0, 0.5, 0.5,
    0.5, 1.0, 0.5, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5
  ];

  textures_slice_node_data = new Uint8Array([
    0, 0, 0, 0,
    38, 38, 38, 38,
    76, 76, 76, 76,
    115, 115, 115, 115,
    153, 153, 153, 153,
    191, 191, 191, 191,
    191, 191, 191, 191,
    0, 0, 0, 0,
    38, 38, 38, 38,
    76, 76, 76, 76,
    115, 115, 115, 115,
    153, 153, 153, 153,
  ]);

  textures_slice_node = new Float32Array([
    0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0
  ]);

  indices_slice_node = [
    0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7,
    8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15,
    16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23
  ];

  // slice cell file triangles

  vertices_slice_cell = [
    0.1, 0.1, 0.5, 0.4, 0.1, 0.5, 0.4, 0.4, 0.5, 0.1, 0.4, 0.5,
    0.1, 0.1, 1.0, 0.4, 0.1, 1.0, 0.4, 0.4, 1.0, 0.1, 0.4, 1.0,
    0.1, 0.1, 0.5, 0.1, 0.4, 0.5, 0.1, 0.4, 1.0, 0.1, 0.1, 1.0,
    0.4, 0.1, 0.5, 0.4, 0.4, 0.5, 0.4, 0.4, 1.0, 0.4, 0.1, 1.0,
    0.1, 0.1, 0.5, 0.1, 0.1, 1.0, 0.4, 0.1, 1.0, 0.4, 0.1, 0.5,
    0.1, 0.4, 0.5, 0.1, 0.4, 1.0, 0.4, 0.4, 1.0, 0.4, 0.4, 0.5
  ];

  textures_slice_cell_data = new Uint8Array([
    0, 0, 0, 0,
    38, 38, 38, 38,
    76, 76, 76, 76,
    115, 115, 115, 115,
    153, 153, 153, 153,
    191, 191, 191, 191,
    191, 191, 191, 191,
    0, 0, 0, 0,
    38, 38, 38, 38,
    76, 76, 76, 76,
    115, 115, 115, 115,
    153, 153, 153, 153,
  ]);

  textures_slice_cell = new Float32Array([
    0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0
  ]);

  indices_slice_cell = [
    0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7,
    8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15,
    16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23
  ];

  // slice geom file triangles

  vertices_slice_geom = [
    0.75, 0.125, 0.30, 1.00, 0.125, 0.30, 1.00, 0.375, 0.30, 0.75, 0.375, 0.30,
    0.75, 0.125, 0.65, 1.00, 0.125, 0.65, 1.00, 0.375, 0.65, 0.75, 0.375, 0.65,
    0.75, 0.125, 0.30, 0.75, 0.375, 0.30, 0.75, 0.375, 0.65, 0.75, 0.125, 0.65,
    1.00, 0.125, 0.30, 1.00, 0.375, 0.30, 1.00, 0.375, 0.65, 1.00, 0.125, 0.65,
    0.75, 0.125, 0.30, 0.75, 0.125, 0.65, 1.00, 0.125, 0.65, 1.00, 0.125, 0.30,
    0.75, 0.375, 0.30, 0.75, 0.375, 0.65, 1.00, 0.375, 0.65, 1.00, 0.375, 0.30
  ];

  textures_slice_geom_data = new Uint8Array([
    0, 0, 0, 0,
    38, 38, 38, 38,
    76, 76, 76, 76,
    115, 115, 115, 115,
    153, 153, 153, 153,
    191, 191, 191, 191,
    191, 191, 191, 191,
    0, 0, 0, 0,
    38, 38, 38, 38,
    76, 76, 76, 76,
    115, 115, 115, 115,
    153, 153, 153, 153,
  ]);

  textures_slice_geom = new Float32Array([
    0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0
  ]);

  indices_slice_geom = [
    0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7,
    8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15,
    16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23
  ];

  // boundary file triangles

  vertices_bndf_node = [
    0.75, 0.125, 0.00, 1.00, 0.125, 0.00, 1.00, 0.375, 0.00, 0.75, 0.375, 0.00,
    0.75, 0.125, 0.25, 1.00, 0.125, 0.25, 1.00, 0.375, 0.25, 0.75, 0.375, 0.25,
    0.75, 0.125, 0.00, 0.75, 0.375, 0.00, 0.75, 0.375, 0.25, 0.75, 0.125, 0.25,
    1.00, 0.125, 0.00, 1.00, 0.375, 0.00, 1.00, 0.375, 0.25, 1.00, 0.125, 0.25,
    0.75, 0.125, 0.00, 0.75, 0.125, 0.25, 1.00, 0.125, 0.25, 1.00, 0.125, 0.00,
    0.75, 0.375, 0.00, 0.75, 0.375, 0.25, 1.00, 0.375, 0.25, 1.00, 0.375, 0.00
  ];

  textures_bndf_node_data = new Uint8Array([
    0, 0, 0, 0,
    38, 38, 38, 38,
    76, 76, 76, 76,
    115, 115, 115, 115,
    153, 153, 153, 153,
    191, 191, 191, 191,
    191, 191, 191, 191,
    0, 0, 0, 0,
    38, 38, 38, 38,
    76, 76, 76, 76,
    115, 115, 115, 115,
    153, 153, 153, 153,
  ]);

  textures_bndf_node = new Float32Array([
    0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0
  ]);

  indices_bndf_node = [
    0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7,
    8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15,
    16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23
  ];

  // colorbar

  texture_colorbar_data = new Uint8Array([
    255, 0, 0, 255,
    160, 80, 0, 255,
    80, 160, 0, 255,
    0, 255, 0, 255,
    255, 0, 0, 255,
    255, 0, 80, 255,
    255, 0, 160, 255,
    0, 0, 255, 255
  ]);
  texture_colorbar_numcolors = 8;

  // line geometry

  vertices_line = [
    0, 0, 0, 0, 1, 1,
    0, 0, 0, 1, 0, 0
  ];

  colors_line = [
    1, 0, 0, 0, 1, 0,
    0, 0, 1, 1, 1, 0
  ];

  indices_line = [
    0, 1, 2, 3
  ];

  vertices_part_data = [
    0.0, 1.0, 0.75,
    0.25, 0.75, 0.75,
    0.5, 0.5, 0.75,
    0.75, 0.25, 0.75,
    1.0, 0.0, 0.75,
    0.0, 1.0, 1.0,
    0.25, 0.75, 1.0,
    0.5, 0.5, 1.0,
    0.75, 0.25, 1.0,
    1.0, 0.0, 1.0
  ];

  colors_part_data = [
    1, 0, 0,
    0, 1, 0,
    0, 0, 1,
    1, 1, 0,
    0, 0, 1,
    1, 0, 0,
    0, 1, 0,
    0, 0, 1,
    1, 1, 0,
    0, 0, 1
  ];

  // offsets for each particle frame
  part_offsets = [
    0, 5
  ];

  // size of each particle frame
  part_sizes = [
    5, 5
  ];

  vertices_part = [
    0.0, 1.0, 0.75, 0.25, 0.75, 0.75, 0.5, 0.5, 0.75, 0.75, 0.25, 0.75, 1.0, 0.0, 0.75
  ];

  colors_part = [
    1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1
  ];

  // must be at least as large as largest particle frame
  indices_part = [
    0, 1, 2, 3, 4
  ];

  constructor(
    private httpManager: HttpManagerService,
  ) { }

  public getObsts() {
    this.httpManager.get('https://localhost:3000/api/test').then(
      (result: Result) => {

        if (result.meta.status == 'success') {
          return result.data;
        }
      },
      (error) => {
        if (isDevMode()) console.log(error);
      });

  }

}
